{{ define "title" }} 
Insert password
{{ end }}

{{ define "content" }}
<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
  <div class="sm:mx-auto sm:w-full sm:max-w-sm">
    <h2 class="mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900">Insert new password</h2>
  </div>

    <div id="insertion-result">
        
    </div>
  <div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
    <form id="passwordInsert"  hx-target="#insertion-result" class="space-y-6">
      <div>
        <label for="name" class="block text-sm font-medium leading-6 text-gray-900">Name</label>
        <div class="mt-2">
          <input id="name" name="password_name" type="text" required class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
        </div>
      </div>

      <div>
        <label for="password" class="block text-sm font-medium leading-6 text-gray-900">Password</label>
        <div class="mt-2">
          <input id="password" name="password_encrypted" type="password" required class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
        </div>
      </div>
      <div>
        <label for="publicKey" class="block text-sm font-medium leading-6 text-gray-900">Public key</label>
        <div class="mt-2">
          <textarea id="publicKey" type="text" required class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
          ></textarea>
        </div>
      </div>

      <div>
        <button type="submit" class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save password</button>
      </div>
    </form>
  </div>
</div>

<script>
function uint8ArrayToBase64(uint8Array) {
    let binaryString = '';
    uint8Array.forEach(byte => {
        binaryString += String.fromCharCode(byte);
    });
    return btoa(binaryString); 
}
document.getElementById("passwordInsert").addEventListener("submit", async function (e) {
    e.preventDefault(); 

    const publicKeyText= document.getElementById("publicKey").value;
    const password = document.getElementById("password").value

    try {
        const publicKey = await openpgp.readKey({ armoredKey: publicKeyText });

        const encryptedPassword = await openpgp.encrypt({
            message: await openpgp.createMessage({ text: password}), 
            encryptionKeys: publicKey,
            format: 'binary', 
        });

        encryptedPasswordBinary =  uint8ArrayToBase64(encryptedPassword)
        console.log(encryptedPasswordBinary)
        document.getElementById("password").value = encryptedPasswordBinary;

        const form = document.getElementById("passwordInsert");
        const formData = new FormData(form);


        htmx.ajax('POST', "/insert", {
            target: form.getAttribute("hx-target"),
            swap: form.getAttribute("hx-swap"),
            values: Object.fromEntries(formData)
        });

    } catch (err) {
        console.error("Signing failed:", err);
        alert("Failed to sign the message. Please check your private key or passphrase.");
    }
});
</script>
{{ end }}

