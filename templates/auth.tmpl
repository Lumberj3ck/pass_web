{{ define "title" }} 
Auth
{{ end }}

{{ define "content" }}

<div class="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
    <div class="mb-6 p-4 bg-blue-50 border-l-4 border-blue-500 text-blue-700">
        <div class="flex items-center">
            <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
            </svg>
            <p>Please note your private key stays in the current browser tab and never goes anywhere</p>
        </div>
    </div>

    <div id="result" class="mb-6"></div>

    <form id="signed-form" hx-target="#result" class="space-y-6">
        <div class="w-full">
            <label for="auth-private-key" class="block text-sm font-medium text-gray-700 mb-2">
                Private Key
            </label>
            <textarea 
                id="auth-private-key" 
                rows="6" 
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Paste your private key here..."
                required
            ></textarea>
            <input type="hidden" name="signature" id="signature">
        </div>

        <input type="hidden" name="challenge" id="challenge" value="{{ .Challenge }}">
        <input type="hidden" name="challengeId" id="challengeId" value="{{ .ChallengeID }}">
        
        <button 
            type="submit"
            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out"
        >
            <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
            </svg>
            Sign with private key
        </button>
    </form>
</div>

<script>
document.getElementById("signed-form").addEventListener("submit", async function (e) {
    e.preventDefault(); 
    console.log("Prevented default and fire own")

    const messageText = document.getElementById("challenge").value;
    const privateKeyText = document.getElementById("auth-private-key").value;
    const passphrase = prompt("Please, provide passphrase for the private key"); 

    try {
        const privateKey = await openpgp.readPrivateKey({ armoredKey: privateKeyText });
        const decryptedKey = await openpgp.decryptKey({
            privateKey,
            passphrase
        });

        const signedMessage = await openpgp.sign({
            message: await openpgp.createCleartextMessage({ text: messageText }), 
            signingKeys: decryptedKey
        });
        document.getElementById("signature").value = signedMessage;

        const form = document.getElementById("signed-form");
        const formData = new FormData(form);

        htmx.ajax('POST', form.getAttribute("hx-post"), {
            target: form.getAttribute("hx-target"),
            swap: form.getAttribute("hx-swap"),
            values: Object.fromEntries(formData)
        });

    } catch (err) {
        console.error("Signing failed:", err);
        alert("Failed to sign the message. Please check your private key or passphrase.");
    }
});
</script>
{{ end }}
